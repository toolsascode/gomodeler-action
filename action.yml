name: 'Go Modeler for File Templates'
description: 'Create and compile your file templates for deploy, Github Step Summary and others with ease.'

branding:
  icon: 'terminal'
  color: 'green'

inputs:
  go-setup:
    description: 'By default, Golang installation is enabled for binary installation via `go install` command.'
    required: false
    default: 'true'
  log-level:
    description: 'Expected log level in application output. Currently the following options are supported: debug, info, warn, error, fatal or panic'
    required: false
    default: 'info'
  environments:
    description: 'List of environment variables in key=value format'
    required: false
    default: ""
  environment-file:
    description: 'Environment variables file in YAML or JSON format.'
    required: false
    default: ""
  template:
    description: 'gotemplate code block to be rendered.'
    required: false
    default: ""
  template-file:
    description: 'List of template files for rendering.'
    required: false
    default: ""
  template-path:
    description: 'Path of template files for rendering.'
    required: false
    default: ""
  output-path:
    description: 'The path where the rendered files will be stored.'
    required: false
    default: "./outputs"
  github-step-summary:
    description: 'Add rendered content to GITHUB_STEP_SUMMARY output.'
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:
    - name: Initial Configuration
      shell: bash
      run: |
        echo "GOMODELER_PATH=${GITHUB_ACTION_PATH:-./}" >> "$GITHUB_ENV"
        echo "GOMODELER_PATH_TEMPLATE=${GITHUB_ACTION_PATH:-./}/templates" >> "$GITHUB_ENV"
        echo "GOMODELER_PATH_OUTPUT=${GITHUB_ACTION_PATH:-./}/outputs" >> "$GITHUB_ENV"

        mkdir -p "$GOMODELER_PATH_TEMPLATE" && rm -rf $GOMODELER_PATH_TEMPLATE/*
        mkdir -p "$GOMODELER_PATH_OUTPUT" && rm -rf $GOMODELER_PATH_OUTPUT/*
        mkdir -p "${{ inputs.output-path }}"
        echo "" > $GOMODELER_PATH/envFile.yaml
    - if: ${{ inputs.environments != '' }}
      name: List of environments
      shell: bash
      run: |
        echo "::group::Environments file:"
        echo "${{ inputs.environments }}" | sed 's|=|: >- \n  |g' >> $GOMODELER_PATH/envFile.yaml
        cat $GOMODELER_PATH/envFile.yaml
        echo "::endgroup::"
    - if: ${{ inputs.environment-file != '' }}
      name: Environments file
      shell: bash
      run: |
        cat "${{ inputs.environment-file }}" >> $GOMODELER_PATH/envFile.yaml
        echo "::group::Environments file:"
        cat $GOMODELER_PATH/envFile.yaml
        echo "::endgroup::"
    - if: ${{ inputs.template != '' }}
      name: Tuning the model
      shell: bash
      run: |
        echo "${{ inputs.template }}" > $GOMODELER_PATH_TEMPLATE/summary.txt.yaml
        echo "::group::Summary Text File:"
        cat $GOMODELER_PATH_TEMPLATE/summary.txt.yaml
        echo "::endgroup::"
    - if: ${{ inputs.template-file != '' }}
      name: Template file
      shell: bash
      run: |
        echo "::group::Template file"
        cp "${{ inputs.template-file }}" $GOMODELER_PATH_TEMPLATE
        echo "::endgroup::"
    - if: ${{ inputs.template-path != '' }}
      name: Template path
      shell: bash
      run: |
        echo "::group::Template path"
        cp -Rv ${{ inputs.template-path }}/* $GOMODELER_PATH_TEMPLATE
        echo "::endgroup::"
    - name: Check if Golang command exists.
      id: golang-exists
      shell: bash
      run: |
        if command -v go &> /dev/null
        then
          echo "installed=true" >> "$GITHUB_OUTPUT"
        else
          echo "installed=false" >> "$GITHUB_OUTPUT"
        fi

    - if: ${{ inputs.go-setup == 'true' && steps.golang-exists.outputs.installed == 'false' }}
      name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.x'
        cache: false
    - name: Installing GoModeler for Templates
      shell: bash
      run: |
        go install github.com/toolsascode/gomodeler@latest

    - name: Rendering template
      shell: bash
      run: |

        echo "::group::Running the Go Modeler"
        export PATH=${PATH}:$(go env GOPATH)/bin

        gomodeler -f ./envFile.yaml --template-path $GOMODELER_PATH_TEMPLATE \
        --output-path "$GOMODELER_PATH_OUTPUT" --log-level "${{ inputs.log-level }}"
        
        cp $GOMODELER_PATH_OUTPUT/* "${{ inputs.output-path }}"
        
        echo "::endgroup::"

        echo "::group::${{ inputs.output-path }}"
        ls -la ${{ inputs.output-path }}
        echo "::endgroup::"

    - if: ${{ inputs.github-step-summary == 'true' }}
      name: Sent information to Step Summary
      shell: bash
      run: |
        cat $GOMODELER_PATH_OUTPUT/* >> $GITHUB_STEP_SUMMARY
